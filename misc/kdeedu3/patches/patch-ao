$NetBSD: patch-ao,v 1.1.2.2 2005/02/20 18:45:06 snj Exp $

--- kstars/kstars/indi/lilxml.c.orig	2004-06-25 21:10:04.000000000 +1200
+++ kstars/kstars/indi/lilxml.c	2005-02-19 15:01:32.000000000 +1300
@@ -32,6 +32,7 @@
 #include <ctype.h>
 
 #include "lilxml.h"
+#include "indicom.h"
 
 static int oneXMLchar (LilXML *lp, int c, char errmsg[]);
 static void initParser(LilXML *lp);
@@ -156,7 +157,7 @@
 
 	/* EOF? */
 	if (newc == 0) {
-	    sprintf (errmsg, "Line %d: XML EOF", lp->ln);
+	    snprintf (errmsg, ERRMSG_SIZE, "Line %d: XML EOF", lp->ln);
 	    initParser(lp);
 	    return (NULL);
 	}
@@ -344,7 +345,7 @@
 /* search ep for an attribute with the given name and return its value.
  * return "" if not found.
  */
-char *
+const char *
 findXMLAttValu (XMLEle *ep, char *name)
 {
 	XMLAtt *a = findXMLAtt (ep, name);
@@ -428,7 +429,7 @@
 		growString (&lp->ce->tag, c);
 		lp->cs = INTAG;
 	    } else if (!isspace(c)) {
-		sprintf (errmsg, "Line %d: Bogus tag char %c", lp->ln, c);
+		snprintf (errmsg, ERRMSG_SIZE, "Line %d: Bogus tag char %c", lp->ln, c);
 		return (-1);
 	    }
 	    break;
@@ -454,7 +455,7 @@
 		growString (&lp->ce->at[lp->ce->nat-1]->name, c);
 		lp->cs = INATTRN;
 	    } else if (!isspace(c)) {
-		sprintf (errmsg, "Line %d: Bogus leading attr name char: %c",
+		snprintf (errmsg, ERRMSG_SIZE, "Line %d: Bogus leading attr name char: %c",
 								    lp->ln, c);
 		return (-1);
 	    }
@@ -467,7 +468,7 @@
 		popXMLEle(lp);
 		lp->cs = LOOK4CON;
 	    } else {
-		sprintf (errmsg, "Line %d: Bogus char %c before >", lp->ln, c);
+		snprintf (errmsg, ERRMSG_SIZE, "Line %d: Bogus char %c before >", lp->ln, c);
 		return (-1);
 	    }
 	    break;
@@ -478,7 +479,7 @@
 	    else if (isspace(c) || c == '=')
 		lp->cs = LOOK4ATTRV;
 	    else {
-		sprintf (errmsg, "Line %d: Bogus attr name char: %c", lp->ln,c);
+		snprintf (errmsg, ERRMSG_SIZE, "Line %d: Bogus attr name char: %c", lp->ln,c);
 		return (-1);
 	    }
 	    break;
@@ -489,7 +490,7 @@
 		growString (&lp->ce->at[lp->ce->nat-1]->valu, '\0');
 		lp->cs = INATTRV;
 	    } else if (!(isspace(c) || c == '=')) {
-		sprintf (errmsg, "Line %d: No value for attribute %s", lp->ln,
+		snprintf (errmsg, ERRMSG_SIZE, "Line %d: No value for attribute %.100s", lp->ln,
 					    lp->ce->at[lp->ce->nat-1]->name);
 		return (-1);
 	    }
@@ -547,7 +548,7 @@
 		growString (&lp->endtag, c);
 		lp->cs = INCLOSETAG;
 	    } else if (!isspace(c)) {
-		sprintf (errmsg, "Line %d: Bogus preend tag char %c", lp->ln,c);
+		snprintf (errmsg, ERRMSG_SIZE, "Line %d: Bogus preend tag char %c", lp->ln,c);
 		return (-1);
 	    }
 	    break;
@@ -557,7 +558,7 @@
 		growString (&lp->endtag, c);
 	    else if (c == '>') {
 		if (strcmp (lp->ce->tag, lp->endtag)) {
-		    sprintf (errmsg,"Line %d: closing tag %s does not match %s",
+		    snprintf (errmsg, ERRMSG_SIZE, "Line %d: closing tag %.64s does not match %.64s",
 					    lp->ln, lp->endtag, lp->ce->tag);
 		    return (-1);
 		} else if (lp->ce->pe) {
@@ -566,7 +567,7 @@
 		} else
 		    return (1);		/* yes! */
 	    } else if (!isspace(c)) {
-		sprintf (errmsg, "Line %d: Bogus end tag char %c", lp->ln, c);
+		snprintf (errmsg, ERRMSG_SIZE, "Line %d: Bogus end tag char %c", lp->ln, c);
 		return (-1);
 	    }
 	    break;
@@ -723,7 +724,7 @@
 main (int ac, char *av[])
 {
 	LilXML *lp = newLilXML();
-	char errmsg[1024];
+	char errmsg[ERRMSG_SIZE];
 	XMLEle *root;
 
 	root = readXMLFile (stdin, lp, errmsg);
