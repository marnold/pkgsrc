$NetBSD: patch-ah,v 1.1.1.1 2003/12/24 12:57:30 jmmv Exp $

--- texk/ps2pkm/hints.c.orig	Sat Jan 24 23:11:28 1998
+++ texk/ps2pkm/hints.c	Thu Sep 30 13:34:00 1999
@@ -167,7 +167,7 @@
     }
   else                             /* error */
     {
-    abort("ComputeHint: invalid orientation");
+    t1_abort("ComputeHint: invalid orientation");
     }
  
   IfTrace4((HintDebug > 1),
@@ -201,7 +201,7 @@
     }
   else                           /* error */
     {
-    abort("ComputeHint: invalid hinttype");
+    t1_abort("ComputeHint: invalid hinttype");
     }
  
   IfTrace1((HintDebug > 1),"  hintValue=%p", hintValue);
@@ -218,7 +218,7 @@
     }
   else                             /* error */
     {
-    abort("ComputeHint: invalid orientation");
+    t1_abort("ComputeHint: invalid orientation");
     }
 }
  
@@ -267,7 +267,7 @@
       }
     else                             /* error */
       {
-      abort("ProcessHint: invalid label");
+      t1_abort("ProcessHint: invalid label");
       }
     }
   else if (hP->adjusttype == 'r')  /* Reverse */
@@ -283,18 +283,18 @@
         }
       else                           /* error */
         {
-        abort("ProcessHint: label is not in use");
+        t1_abort("ProcessHint: label is not in use");
         }
       }
     else                           /* error */
       {
-      abort("ProcessHint: invalid label");
+      t1_abort("ProcessHint: invalid label");
       }
  
     }
   else                           /* error */
     {
-    abort("ProcessHint: invalid adjusttype");
+    t1_abort("ProcessHint: invalid adjusttype");
     }
   IfTrace3((HintDebug > 1),"  label=%d, thisHint=(%p,%p)\n",
     hP->label, thisHint.x, thisHint.y);
@@ -386,7 +386,7 @@
        else
                return(XofY(edge, y));
  
-       abort("bad subpath chain");
+       t1_abort("bad subpath chain");
        /*NOTREACHED*/
 }
 /*
@@ -467,7 +467,7 @@
        else if (ISBOTTOM(e1->flag) && y == e1->ymax)
                return(!ISDOWN(e2->flag));
        else
-               abort("ImpliedHorizontalLine:  why ask?");
+               t1_abort("ImpliedHorizontalLine:  why ask?");
        /*NOTREACHED*/
 }
  
@@ -506,7 +506,7 @@
                if (!ISBREAK(edge, next))
                        continue;
                if (edge->ymax < next->ymin)
-                       abort("disjoint subpath?");
+                       t1_abort("disjoint subpath?");
 /*
 'edge' now contains an edgelist at the bottom of an edge, and 'next'
 contains the next subsequent edgelist in the subpath, which must be at
@@ -567,7 +567,7 @@
  
                break1->subpath = break2->subpath;
                if (ISBREAK(break1, break1->subpath))
-                       abort("unable to fix subpath break?");
+                       t1_abort("unable to fix subpath break?");
  
                break2->subpath = next;
  
