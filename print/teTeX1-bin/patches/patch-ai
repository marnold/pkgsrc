$NetBSD: patch-ai,v 1.1.1.1 2003/12/24 12:57:30 jmmv Exp $

--- texk/ps2pkm/objects.c.orig	Tue Feb 24 22:54:33 1998
+++ texk/ps2pkm/objects.c	Thu Sep 30 13:34:16 1999
@@ -300,14 +300,14 @@
        size = (size + sizeof(LONG) - 1) & -sizeof(LONG);
        extra = (extra + sizeof(LONG) - 1) & -sizeof(LONG);
        if (size + extra <= 0)
-               abort("Non-positive allocate?");
+               t1_abort("Non-positive allocate?");
        r = (struct xobject *) Xalloc(size + extra);
  
        while (r == NULL) {
                if (!GimeSpace()) {
                        IfTrace1(TRUE, "malloc attempted %d bytes.\n",
                                            size + extra);
-                       abort("We have REALLY run out of memory");
+                       t1_abort("We have REALLY run out of memory");
                }
                r = (struct xobject *) Xalloc(size + extra);
        }
@@ -358,7 +358,7 @@
        register struct xobject *obj;  /* structure to free                   */
 {
        if (obj->type == INVALIDTYPE)
-               abort("Free of already freed object?");
+               t1_abort("Free of already freed object?");
        obj->type = INVALIDTYPE;
  
        if (MemoryDebug > 1) {
@@ -777,7 +777,7 @@
        char name[NAMESIZE];  /* buffer to store my copy of 'username'        */
  
        if (strlen(username) >= NAMESIZE)
-               abort("Pragmatics name too large");
+               t1_abort("Pragmatics name too large");
        strcpy(name, username);
        for (p = name; *p != '\0'; p++)
                *p = toupper(*p);
@@ -941,7 +941,7 @@
                return;
  
            default:
-               abort("Consume:  too many objects");
+               t1_abort("Consume:  too many objects");
        }
 }
 #endif /* WIN32 */
@@ -967,7 +967,7 @@
        ObjectPostMortem(obj);
  
        if (MustCrash)
-               abort("Terminating because of CrashOnUserError...");
+               t1_abort("Terminating because of CrashOnUserError...");
        else
                ErrorMessage = typemsg;
  
@@ -1062,14 +1062,14 @@
        if (obj != NULL)
                ObjectPostMortem(obj);
        if (MustCrash)
-               abort("Terminating because of CrashOnUserError...");
+               t1_abort("Terminating because of CrashOnUserError...");
        else
                ErrorMessage = str;
        return(ret);
 }
  
 /*
-:h3.abort() - Crash Due to Error
+:h3.t1_abort() - Crash Due to Error
  
 We divide by zero, and if that doesn't work, call exit(), the results of
 which is system dependent (and thus is part of the Hourglass required
@@ -1078,7 +1078,7 @@
 static int test = 0;
  
 /*ARGSUSED*/
-void abort(str)
+void t1_abort(str)
        char *str;
 {
        LineIOTrace = TRUE;
@@ -1120,7 +1120,7 @@
 /* All other calls to malloc are defined to Xalloc.  */
  
        if (sizeof(SHORT) != 2 || sizeof(LONG) != 4)
-          abort("Fundamental TYPE1IMAGER assumptions invalid in this port");
+          t1_abort("Fundamental TYPE1IMAGER assumptions invalid in this port");
        InitSpaces();
        InitFonts();
        InitFiles();
