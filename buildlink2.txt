$NetBSD: buildlink2.txt,v 1.1.2.1 2002/05/08 07:37:26 jlam Exp $

The buildlink2 framework is a departure from the original buildlink
framework, which tries to do its work up-front before the configure
process, and fix things up after the build process.  Over time, the
buildlink framework grew overly complex to deal with software that stored
build-time information in the installed files, e.g. GNOME packages.  The
new framework actually does its work as the software is being configured
and built through a series of wrapper scripts that are used in place of the
normal compiler tools.  We still symlink libraries and headers into
${BUILDLINK_DIR} to normalize the environment in which the software is
built, but now we tell the configure process the actual installed locations
of the libraries and headers we are using, and the compiler wrappers will
munge them into references into ${BUILDLINK_DIR}.

Here are some FAQs and answers regarding buildlink2:

Q: Why is the buildlink2 framework better than the existing one?
A: There are several reasons:

    (1) The new framework makes it simpler to buildinkify a package because
	we just convert dependencies into including the equivalent
	buildlink2.mk files and define USE_BUILDLINK2_ONLY.  We don't need
	to lie about where libraries or headers we use are installed.

    (2) All packages using the new framework are strongly buildlinked; it
	is not possible to create weakly buildlinked packages.  This
	deprecates the need for x11.buildlink.mk.

    (3) We no longer care if the configure or build process adds
	-I${PREFIX}/include or -L${PREFIX}/lib to the compiler or link
	lines.  We _want_ them to do so (and we actually add them
	ourselves) since they are munged into references to
	${BUILDLINK_DIR) by the wrapper scripts.

    (4)	We no longer need to create and use config script wrappers.

    (5) buildlink2.mk files now simply create the <pkg>-buildlink target
	and can discard the REPLACE_BUILDLINK and *CONFIG_WRAPPER* lines.

    (6) We no longer mess around with configure scripts or Makefiles before
	the build process, so we don't accidentally trigger rebuilds of
	those files if the software uses GNU autoconf/automake.

Q: How does this affect packages that use the existing buildlink framework?
A: The buildlink and buildlink2 frameworks can coexist within pkgsrc, but
   packages that use the new framework must be use it exclusively, i.e. a
   package Makefile can't include both buildlink.mk and buildlink2.mk
   files.  Packages that use the old framework can continue to do so, but
   it is encouraged that they convert to the new buildlink2 framework for
   the benefits listed earlier.

Q: Can I make strongly buildlinked packages that use imake?
A: Yes.  Packages that use imake to drive the configuration and build
   processes can now be strongly buildlinked as well.

Q: How do I use compilers other than the system-supplied cc?  I currently
   set CC=/my/special/c-compiler in /etc/mk.conf.
A: It should Just Work.  The wrapper scripts automatically handle this
   situation.  The software is told to use CC=cc, which points to the
   special compiler wrapper script in ${BUILDLINK_DIR}/bin/cc, but the
   wrapper itself will call the CC that you explicitly set.

Q: So what's bad about the new buildlink2 framework?
A: The full build now takes longer than it used to.  Since we are using
   wrapper scripts in place of the compilers, we bear the cost of the extra
   shell processes invoked as a result.  The increased build times on the
   two platforms on which I was able to test are roughly:

	NetBSD-1.5ZC/i386	+3% (non-USE_LIBTOOL)
				+5% (USE_LIBTOOL)

	NetBSD-1.5.1/mac68k	+9% (USE_LIBTOOL)

   The i386 box is an Intel P3 850MHz + UDMA IDE HD + 512MB SDRAM.
   The mac68k box is a Quadra 650 (68040) + SCSI2 HD + 48MB RAM.
