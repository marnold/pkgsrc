$NetBSD: patch-ab,v 1.1.1.1 2001/09/30 10:26:11 seb Exp $

--- ctags.1.orig	Sun Apr 15 19:18:22 2001
+++ ctags.1
@@ -1,27 +1,26 @@
-.TH CTAGS 1 "Version 5.0.1" "Darren Hiebert"
+.TH EXCTAGS 1 "Version 5.0.1" "Darren Hiebert"
 
 
 .SH "NAME"
-ctags \- Generate tag files for source code
+exctags \- Generate tag files for source code
 
 
 .SH SYNOPSIS
 .TP 6
-\fBctags\fP [\fBoptions\fP] [\fIfile(s)\fP]
-.TP 6
-\fBetags\fP [\fBoptions\fP] [\fIfile(s)\fP]
+\fBexctags\fP [\fBoptions\fP] [\fIfile(s)\fP]
+\fBexetags\fP [\fBoptions\fP] [\fIfile(s)\fP]
 
 
 .SH "DESCRIPTION"
-The \fBctags\fP and \fBetags\fP programs (hereinafter collectively referred to
-as \fBctags\fP, except where distinguished) generate an index (or "tag") file
+The \fBexctags\fP and \fBexetags\fP programs (hereinafter collectively referred to
+as \fBexctags\fP, except where distinguished) generate an index (or "tag") file
 for a variety of language objects found in \fIfile(s)\fP.
 This tag file allows these items to be quickly and easily located by a text
 editor or other utility. A "tag" signifies a language object for which an
 index entry is available (or, alternatively, the index entry created for that
 object).
 
-Alternatively, \fBctags\fP can generate a cross reference file which lists, in
+Alternatively, \fBexctags\fP can generate a cross reference file which lists, in
 human readable form, information about the various source objects found in a
 set of language files.
 
@@ -42,7 +41,7 @@
 \fBZeus\fP
 .RE
 
-\fBCtags\fP is capable of generating different kinds of tags for each of many
+\fBExctags\fP is capable of generating different kinds of tags for each of many
 different languages. For a complete list of supported languages, the names
 by which they are recognized, and the kinds of tags which are generated for
 each, see \fBTAG KINDS\fP, below.
@@ -133,8 +132,8 @@
 .RE
 
 By default, all other files names are ignored. This permits running
-\fBctags\fP on all files in either a single directory (e.g. "ctags *"), or all
-files in an entire source directory tree (e.g. "ctags -R"), since only those
+\fBexctags\fP on all files in either a single directory (e.g. "exctags *"), or all
+files in an entire source directory tree (e.g. "exctags -R"), since only those
 files whose names are mapped to languages will be scanned.
 
 The reason that .h extensions are mapped to C++ files rather than C files
@@ -144,8 +143,8 @@
 
 .SH "OPTIONS"
 
-Despite the wealth of available options, defaults are set so that \fBctags\fP
-is most commonly executed without any options (e.g. "ctags *", or "ctags -R"),
+Despite the wealth of available options, defaults are set so that \fBexctags\fP
+is most commonly executed without any options (e.g. "exctags *", or "exctags -R"),
 which will create a tag file in the current directory for all recognized
 source files. The options described below are provided merely to allow custom
 tailoring to meet special needs.
@@ -181,7 +180,7 @@
 .TP 5
 .B \-e
 Enable etags mode, which will create a tag file for use with the Emacs editor.
-Alternatively, if \fBctags\fP is invoked by a name containing the string
+Alternatively, if \fBexctags\fP is invoked by a name containing the string
 "etags" (either by renaming, or creating a link to, the executable), etags
 mode will be enabled. This option must appear before the first file name.
 
@@ -189,10 +188,10 @@
 .BI \-f " tagfile"
 Use the name specified by \fItagfile\fP for the tag file (default is "tags",
 or "TAGS" when running in etags mode). If \fItagfile\fP is specified as
-"-", then the tag file is written to standard output instead. \fBCtags\fP
+"-", then the tag file is written to standard output instead. \fBExctags\fP
 will stubbornly refuse to take orders if \fItagfile\fP exists and its first
 line contains something other than a valid tags line. This will save your neck
-if you mistakenly type "ctags -f *.c", which would otherwise overwrite your
+if you mistakenly type "exctags -f *.c", which would otherwise overwrite your
 first C file with the tags generated by the rest! It will also refuse to
 accept a multicharacter file name which begins with a '-' (dash) character,
 since this most likely means that you left out the tag file name and this
@@ -233,7 +232,7 @@
 and C++ source files. This option is specifically provided to handle special
 cases arising through the use of preprocessor macros. When the tokens listed
 are simple tokens, these tokens will be ignored during parsing of the source
-files. If a token is suffixed with a '+' character, \fBctags\fP will also
+files. If a token is suffixed with a '+' character, \fBexctags\fP will also
 ignore any parenthesis-enclosed argument list which may immediately follow the
 token in the source files. If two tokens are separated with the '=' character,
 the first token is replaced by the second token for parsing purposes. The list
@@ -343,9 +342,9 @@
 source line (with extra white space condensed) of the file which defines the
 tag. No tag file is written and all options affecting tag file output will be
 ignored. Example applications for this feature are generating a listing of all
-functions located in a source file (e.g. \fBctags -x --c-types\fP=\fIf\fP
+functions located in a source file (e.g. \fBexctags -x --c-types\fP=\fIf\fP
 \fIfile\fP), or generating a list of all externally visible global variables
-located in a source file (e.g. \fBctags -x --c-types\fP=\fIv\fP
+located in a source file (e.g. \fBexctags -x --c-types\fP=\fIv\fP
 \fB--file-scope\fP=\fIno file\fP). This option must appear before the first
 file name.
 
@@ -365,14 +364,14 @@
 .TP 5
 \fB--exclude\fP=[\fIpattern\fP]
 Add \fIpattern\fP to a list of excluded files and directories. For each file
-name considered by \fBctags\fP, \fIpattern\fP will be compared against both
+name considered by \fBexctags\fP, \fIpattern\fP will be compared against both
 the complete path (e.g. some/path/base.ext) and the base name (e.g. base.ext)
 of the file, thus allowing patterns which match a given file name irrespective
 of its path, or match only a specific path. If appropriate support is
 available from the runtime library of your C compiler, then \fIpattern\fP may
 contain the usual shell wildcards common on Unix (be sure to quote the option
 parameter to protect the wildcards from being expanded by the shell before
-being passed to \fBctags\fP; also be aware that wildcards can match the slash
+being passed to \fBexctags\fP; also be aware that wildcards can match the slash
 character, '/'). You can determine if shell wildcards are available on your
 platfom by examining the output of the \fB--version\fP option, which will
 include "+wildcards" in the compiled feature list; otherwise, \fIpattern\fP
@@ -535,7 +534,7 @@
 
 .TP 5
 \fB--filter\fP[=\fIyes\fP|\fIno\fP]
-Causes \fBctags\fP to behave as a filter, reading source file names from
+Causes \fBexctags\fP to behave as a filter, reading source file names from
 standard input and printing their tags to standard output on a file-by-file
 basis. If \fB--sorted\fP is enabled, tags are sorted only within the source
 file in which they are defined. File names are read from standard output in
@@ -549,7 +548,7 @@
 \fB--filter-terminator\fP=\fIstring\fP
 Specifies a string to print to standard output following the tags for each
 file name parsed when the \fB--filter\fP option is enabled. This may permit an
-application reading the output of ctags to determine when the output for each
+application reading the output of exctags to determine when the output for each
 file is finished. Note that if the file name read is a directory and
 \fB--recurse\fP is enabled, this string will be printed only one once at the
 end of all tags found for by descending the directory. This string will always
@@ -620,7 +619,7 @@
 support is available from the runtime library of your C compiler, then the
 file name pattern may contain the usual shell wildcards common on Unix (be
 sure to quote the option parameter to protect the wildcards from being
-expanded by the shell before being passed to \fBctags\fP). You can determine
+expanded by the shell before being passed to \fBexctags\fP). You can determine
 if shell wildcards are available on your platfom by examining the output of
 the \fB--version\fP option, which will include "+wildcards" in the compiled
 feature list; otherwise, the file name patterns are matched against file names
@@ -647,7 +646,7 @@
 
 .TP 5
 \fB--language-force\fP=\fIlanguage\fP
-By default, \fBctags\fP automatically selects the language of a source file,
+By default, \fBexctags\fP automatically selects the language of a source file,
 ignoring those files whose language cannot be determined (see
 \fBSOURCE FILES\fP, above). This option forces the specified \fIlanguage\fP
 (either built-in or user-defined) to be used for every supplied file instead
@@ -683,7 +682,7 @@
 Specifies whether "#line" directives should be recognized. These are present
 in the output of preprocessors and contain the line number, and possibly the
 file name, of the original source file(s) from which the preprocessor output
-file was generated. When enabled, this option will cause \fBctags\fP to
+file was generated. When enabled, this option will cause \fBexctags\fP to
 generate tag entries marked with the file names and line numbers of their
 locations original source file(s), instead of their actual locations in the
 preprocessor output. The actual file names placed into the tag file will have
@@ -694,7 +693,7 @@
 generally only useful when used together with the \fB--excmd\fP=\fInumber\fP
 (\fB-n\fP) option. Also, you may have to use either the \fB--langmap\fP or
 \fB--language-force\fP option if the extension of the preprocessor output file
-is not known to \fBctags\fP.
+is not known to \fBexctags\fP.
 
 .TP 5
 \fB--links\fP[=\fIyes\fP|\fIno\fP]
@@ -711,7 +710,7 @@
 list of supplied files is empty and no file list is specified with the
 \fB-L\fP option, then the current directory (i.e. ".") is assumed. Symbolic
 links are followed. If you don't like these behaviors, either explicitly
-specify the files or pipe the output of \fBfind\fP(1) into \fBctags -L-\fP
+specify the files or pipe the output of \fBfind\fP(1) into \fBexctags -L-\fP
 instead. \fBNote:\fP This option is not supported on all platforms at present.
 It is available if the output of the \fB--help\fP option includes this option.
 See, also, the \fB--exclude\fP to limit recursion.
@@ -761,7 +760,7 @@
 .RE
 
 .RS 5
-Note that this option is available only if \fBctags\fP was compiled with
+Note that this option is available only if \fBexctags\fP was compiled with
 support for regular expressions, which depends upon your platform. You can
 determine if support for regular expressions is compiled in by examining the
 output of the \fB--version\fP option, which will include "+regex" in the
@@ -787,14 +786,14 @@
 .TP 5
 \fB--totals\fP[=\fIyes\fP|\fIno\fP]
 Prints statistics about the source files read and the tag file written during
-the current invocation of \fBctags\fP. This option is off by default.
+the current invocation of \fBexctags\fP. This option is off by default.
 This option must appear before the first file name.
 
 .TP 5
 \fB--verbose\fP[=\fIyes\fP|\fIno\fP]
 Enable verbose mode. This prints out information on option processing and a
 brief message describing what action is being taken for each file considered
-by \fBctags\fP. Normally, \fBctags\fP does not read command line arguments
+by \fBexctags\fP. Normally, \fBexctags\fP does not read command line arguments
 until after options are read from the configuration files (see \fBFILES\fP,
 below) and the \fBCTAGS\fP environment variable. However, if this option is
 the first argument on the command line, it will take effect before any options
@@ -802,7 +801,7 @@
 
 .TP 5
 \fB--version\fP
-Prints a version identifier for \fBctags\fP to standard output. This is
+Prints a version identifier for \fBexctags\fP to standard output. This is
 guaranteed to always contain the string "Exuberant Ctags".
 
 
@@ -812,7 +811,7 @@
 through use of the \fB--<LANG>-type\fP option. The flags corresponding to each
 tag kind for each langauge are described below. Note that some languages
 and/or tag kinds may be implemented using regular expressions and may not be
-available if regex support is not compiled into \fBctags\fP (see the
+available if regex support is not compiled into \fBexctags\fP (see the
 \fB--regex-<LANG>\fP option). Kinds are enabled by default
 except where noted (with "[off]").
 
@@ -1192,7 +1191,7 @@
 
 .SH "OPERATIONAL DETAILS"
 
-As \fBctags\fP considers each file name in turn, it tries to determine the
+As \fBexctags\fP considers each file name in turn, it tries to determine the
 language of the file by applying the following three tests in order: if the
 file extension has been mapped to a language, if the file name matches a shell
 pattern mapped to a language, and finally if the file is executable and its
@@ -1208,9 +1207,9 @@
 rely upon certain formatting assumptions in order to help it resolve coding
 dilemmas caused by preprocessor conditionals.
 
-In general, \fBctags\fP tries to be smart about conditional preprocessor
+In general, \fBexctags\fP tries to be smart about conditional preprocessor
 directives. If a preprocessor conditional is encountered within a statement
-which defines a tag, \fBctags\fP follows only the first branch of that
+which defines a tag, \fBexctags\fP follows only the first branch of that
 conditional (except in the special case of "#if 0", in which case it follows
 only the last branch). The reason for this is that failing to pursue only one
 branch can result in ambiguous syntax, as in the following example:
@@ -1233,17 +1232,17 @@
 }
 .RE
 
-Both branches cannot be followed, or braces become unbalanced and \fBctags\fP
+Both branches cannot be followed, or braces become unbalanced and \fBexctags\fP
 would be unable to make sense of the syntax.
 
 If the application of this heuristic fails to properly parse a file,
 generally due to complicated and inconsistent pairing within the conditionals,
-\fBctags\fP will retry the file using a different heuristic which does not
+\fBexctags\fP will retry the file using a different heuristic which does not
 selectively follow conditional preprocessor branches, but instead falls back
 to relying upon a closing brace ("}") in column 1 as indicating the end of a
 block once any brace imbalance results from following a #if conditional branch.
 
-\fBCtags\fP will also try to specially handle arguments lists enclosed in
+\fBExctags\fP will also try to specially handle arguments lists enclosed in
 double sets of parentheses in order to accept the following conditional
 construct:
 
@@ -1392,12 +1391,12 @@
 
 
 .SH "CAVEATS"
-Because \fBctags\fP is neither a preprocessor nor a compiler, use of
-preprocessor macros can fool \fBctags\fP into either missing tags or
-improperly generating inappropriate tags. Although \fBctags\fP has been
+Because \fBexctags\fP is neither a preprocessor nor a compiler, use of
+preprocessor macros can fool \fBexctags\fP into either missing tags or
+improperly generating inappropriate tags. Although \fBexctags\fP has been
 designed to handle certain common cases, this is the single biggest cause of
 reported problems. In particular, the use of preprocessor constructs which
-alter the textual syntax of C can fool \fBctags\fP. You can work around many
+alter the textual syntax of C can fool \fBexctags\fP. You can work around many
 such problems by using the \fB-I\fP option.
 
 White space is treated as a separator for file names and options read from
@@ -1406,7 +1405,7 @@
 supply file names or other options containing embedded white space (spaces,
 etc.) through these options.
 
-Note that when \fBctags\fP generates uses patterns for locating tags (see
+Note that when \fBexctags\fP generates uses patterns for locating tags (see
 the \fB--excmd\fP option), it is entirely possible that the wrong line may be
 found by your editor if there exists another source line which is identical to
 the line containing the tag. The following example demonstrates this condition:
@@ -1435,10 +1434,10 @@
 
 
 .SH "BUGS"
-\fBCtags\fP has more options than \fBls\fP(1).
+\fBExctags\fP has more options than \fBls\fP(1).
 
 When parsing a C++ member function definition (e.g. "className::function"),
-\fBctags\fP cannot determine whether the scope specifier is a class name or a
+\fBexctags\fP cannot determine whether the scope specifier is a class name or a
 namespace specifier and always lists it as a class name in the scope portion
 of the extension fields. Also, if the function defintion is located in a
 separate file from than where the class is defined (the usual case), the
@@ -1453,7 +1452,7 @@
 .TP 8
 .B CTAGS
 If this environment variable exists, it will be expected to contain a set of
-default options which are read when \fBctags\fP starts, after the
+default options which are read when \fBexctags\fP starts, after the
 configuration files listed in \fBFILES\fP, below, are read, but before any
 command line options are read. Options appearing on the command line will
 override options specified in this file. Only options will be read from this
@@ -1473,12 +1472,12 @@
 specifies the directory in which to place temporary files. This can be useful
 if the size of a temporary file becomes too large to fit on the partition
 holding the default temporary directory defined at compilation time.
-\fBctags\fP creates temporary files only if either (1) an emacs-style tag file
+\fBexctags\fP creates temporary files only if either (1) an emacs-style tag file
 is being generated, (2) the tag file is being sent to standard output, or (3)
 the program was compiled to use an internal sort algorithm to sort the tag
 files instead of the the sort utility of the operating system. If the sort
 utility of the operating system is being used, it will generally observe this
-variable also. Note that if \fBctags\fP is setuid, the value of TMPDIR will be
+variable also. Note that if \fBexctags\fP is setuid, the value of TMPDIR will be
 ignored.
 
 
@@ -1523,7 +1522,7 @@
 .RE
 
 Also \fBex\fP(1), \fBvi\fP(1), \fBelvis\fP, or, better yet, \fBvim\fP, the
-official editor of \fBctags\fP. For more information on \fBvim\fP, see the VIM
+official editor of \fBexctags\fP. For more information on \fBvim\fP, see the VIM
 Pages web site at:
 
 .RS
@@ -1551,7 +1550,7 @@
 
 
 .SH "CREDITS"
-This version of \fBctags\fP was originally derived from and inspired by the
+This version of \fBexctags\fP was originally derived from and inspired by the
 ctags program by Steve Kirkendall <kirkenda@cs.pdx.edu> that comes with the
 Elvis vi clone (though virtually none of the original code remains).
 
