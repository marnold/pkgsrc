$NetBSD: patch-ab,v 1.3.2.1 2009/02/02 15:13:12 tron Exp $

--- ext/x264/gstx264enc.c.orig	2008-12-21 21:54:04.000000000 +0100
+++ ext/x264/gstx264enc.c
@@ -541,7 +541,12 @@ gst_x264_enc_init_encoder (GstX264Enc * 
   encoder->x264param.i_frame_reference = encoder->ref;
   encoder->x264param.i_bframe = encoder->bframes;
   encoder->x264param.b_bframe_pyramid = encoder->b_pyramid;
+#if X264_BUILD < 63
   encoder->x264param.b_bframe_adaptive = encoder->b_adapt;
+#else
+  encoder->x264param.i_bframe_adaptive =
+      encoder->b_adapt ? X264_B_ADAPT_FAST : X264_B_ADAPT_NONE;
+#endif
   encoder->x264param.b_interlaced = encoder->interlaced;
   encoder->x264param.b_deblocking_filter = 1;
   encoder->x264param.i_deblocking_filter_alphac0 = 0;
@@ -661,8 +666,7 @@ gst_x264_enc_header_buf (GstX264Enc * en
   /* x264 is expected to return an SEI (some identification info),
    * followed by an SPS and PPS */
   if (i_nal != 3 || nal[1].i_type != 7 || nal[2].i_type != 8) {
-    GST_ELEMENT_ERROR (encoder, STREAM, ENCODE, NULL,
-        ("Unexpected x264 header."));
+    GST_ELEMENT_ERROR (encoder, STREAM, ENCODE, ("Unexpected x264 header."), (""));
     return NULL;
   }
 
@@ -935,8 +939,7 @@ gst_x264_enc_encode_frame (GstX264Enc * 
     duration = GST_BUFFER_DURATION (in_buf);
     gst_buffer_unref (in_buf);
   } else {
-    GST_ELEMENT_ERROR (encoder, STREAM, ENCODE, NULL,
-        ("Timestamp queue empty."));
+    GST_ELEMENT_ERROR (encoder, STREAM, ENCODE, ("Timestamp queue empty."), (""));
     return GST_FLOW_ERROR;
   }
 
