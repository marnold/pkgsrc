$NetBSD: PKGVIEWS,v 1.1.2.7 2003/08/01 19:00:24 jlam Exp $

Package views integration plan:
==============================

(1) Modify pkgsrc internals (bsd.pkg.mk & friends) to build and
    install depoted packages if PKG_INSTALLATION_TYPE is set to
    "pkgviews" in the package Makefile, and to add the depoted
    package to the default view.  The depoted package will include
    all of it's metadata files in the depot directory, and we rely
    on pkg_view to copy the metadata files into /var/db/pkg as
    part of adding the package to the default view.  We only
    support the default view.  Depoted packages will install into
    either ${LOCALBASE}/packages or ${X11BASE}/packages, but the
    default view will be through ${LOCALBASE} for all packages.

Using this infrastructure, depoted packages that have been added to
the default view should look and feel like a non-depoted package in
all respects, down to what you find in /var/db/pkg/${PKGNAME}, so
non-depoted packages can depend on depoted packages without change.

(2) Migrate packages set PKG_INSTALLATION_TYPE to "pkgviews".
    Depoted packages can only depend on other depoted packages.  A
    depoted package will have <deppkg_dir>/lib and ${LOCALBASE}/lib
    in the run-time library search path (-Wl,-R*) so that wildcard
    dependencies on library packages will still work (so long as
    the major number of the shlib hasn't increased).

At this point, all packages in pkgsrc will be depoted, and we can
unconditionally set PKG_INSTALLATION_TYPE to "pkgviews" for all of
pkgsrc.  We don't actually require that xpkgwedge be used since
depoted packages can live anywhere, and it's up to pkg_view(1) to
add the depoted package to the default view.

(3) Allow for different package views.  At this point, this step
    should be trivial.

Possible problems:
-----------------

(*) I may be wrong about xpkgwedge.  We may need some sort of
    xpkgwedge package in order to properly handle USE_IMAKE packages
    so that they install into depot directories, but I'm ignoring them
    for now, or at least until we get much further along on step (2).
    Also, I'll figure out how to deal with binary packages later on.

(*) I need to think about how to best integrate buildlink2 with
    pkgviews.  One of the motivating philosophies of buildlink2 is
    that we don't lie to the package configure/build procedure about
    the true location of libraries and headers.  We need to think of
    a way to hide ${LOCALBASE} but not ${DEPOTBASE}/* from the package
    configure/build processes.

Currently, we do the following transformations:

	${LOCALBASE} --> ${BUILDLINK_DIR}
	${X11BASE}   --> ${BUILDLINK_X11_DIR}

We could change the rule to be filter out ${LOCALBASE}/* unless they
match:

	${LOCALBASE}/${DEPOT_SUBDIR}/${_pkg_}
	${X11BASE}/${DEPOT_SUBDIR}/${_pkg_}

for _pkg_ in ${BUILDLINK_PACKAGES}.  We only want to do this change
for "pkgviews" packages, since "overwrite" packages will still work
because "overwrite" packages ignore the existence of pkgviews.
