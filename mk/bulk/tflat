# $NetBSD: tflat,v 1.9.2.1 2003/08/01 19:00:38 jlam Exp $
#
# Copyright (c) 2001 The NetBSD Foundation, Inc.
# All rights reserved.
#
# This code is derived from software contributed to The NetBSD Foundation
# by Dan McMahill.
#
# Redistribution and use in source and binary forms, with or without
# modification, are permitted provided that the following conditions
# are met:
# 1. Redistributions of source code must retain the above copyright
#    notice, this list of conditions and the following disclaimer.
# 2. Redistributions in binary form must reproduce the above copyright
#    notice, this list of conditions and the following disclaimer in the
#    documentation and/or other materials provided with the distribution.
# 3. All advertising materials mentioning features or use of this software
#    must display the following acknowledgement:
#        This product includes software developed by the NetBSD
#        Foundation, Inc. and its contributors.
# 4. Neither the name of The NetBSD Foundation nor the names of its
#    contributors may be used to endorse or promote products derived
#    from this software without specific prior written permission.
#
# THIS SOFTWARE IS PROVIDED BY THE NETBSD FOUNDATION, INC. AND CONTRIBUTORS
# ``AS IS'' AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED
# TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR
# PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL THE FOUNDATION OR CONTRIBUTORS
# BE LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
# CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
# SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
# INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
# CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
# ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
# POSSIBILITY OF SUCH DAMAGE.
#

BEGIN {
	if (ARGC != 3){
		printf("tflat:  wrong number of arguments\n");
		usage();
		exit(1);
	}

	if ( ARGV[1] == "up" ) {
		up=1;
	}
	else{
		if ( ARGV[1] == "down" ) { up=0; }
		else{
			printf("tflat: unknown option  \"%s\"\n",ARGV[1]);
			usage();
			exit(1);
		}
	}
	
	InFile = ARGV[2];

	#
	# Read in the entire depends tree
	#
	if (up){
        	while(getline < InFile > 0){
			if ($1 in topdepends)
				topdepends[$1] = topdepends[$1] " " $2 " " ;
			else{
				topdepends[$1] = " " $2 " ";
			}

			# Note that it is possible for a package "foo/bar" to never
			# appear in $1.  In fact if foo/bar is not depended upon by
			# anything and it has depends then it will not show up in $1
			# however, we need to make sure we get a topdepends[foo/bar]
			# entry so add it here if its not already there.
			if (!($2 in topdepends))
				topdepends[$2] = "";
		}
		depstr = " is depended on by: ";
	}
	else{
        	while(getline < InFile > 0){
			if ($2 in topdepends)
				topdepends[$2] = topdepends[$2] " " $1 " " ;
			else
				topdepends[$2] = " " $1 " " ;
		}
		depstr = " depends on: ";
	}

	close(InFile);
	#
	# Now recurse the tree to give a flattened depends list for each pkg
	#


	for (toppkg in topdepends){
		find_all_depends(toppkg);
	}

	for (x in alldepends){
		print x depstr alldepends[x] | "sort";
	}

	printf("\n");
        exit 0
}

function find_all_depends(pkg,pkgreg,i,deps){
	# if we find the package already has been fully depended
	# then return the depends list
	if (pkg in alldepends){
		return(alldepends[pkg]);	
	}

	# if we find the package listed in its own depends list, then
	# return an empty list if we're going down the depends tree.
	# When a package lists itself in the depends tree file, it simply
	# is a place holder and means the package has no depends.  However
	# other packages may still depend upon it, so we need to keep looking.
	if ( (!up) && (topdepends[pkg]~reg2str(pkg)) ){
		alldepends[pkg] = " ";
		return(alldepends[pkg]);	
	}

	# otherwise recursively gather depends that each of the depends
	# has
	pkgreg=reg2str(pkg);
	split(topdepends[pkg],deps);
	i=1;
	alldepends[pkg] = " ";
	while ( i in deps ){
		# don't add ourselves to the list (a possibility when going up the tree)
		if (" "deps[i]" "!~pkgreg){
			alldepends[pkg] = alldepends[pkg] " " deps[i] " " find_all_depends(deps[i]);
		}
		i=i+1;
	}
	alldepends[pkg] = uniq(alldepends[pkg]);
	return(alldepends[pkg]);	
}

#
# take a string which has special characters like '+' in it and
# escape them.  Also put a space before and after since that's how
# we'll distinguish things like gnome from gnome-libs
#
function reg2str(reg){
	gsub(/\+/,"\\\+",reg);
	reg = " "reg" ";
	return(reg);
}

#
# take the depends lists and uniq them.
#
function uniq(list,deps,i,ulist){
	
	# split out the depends
	split(list,deps);

	i=1;
	ulist = " ";
	while (i in deps){
		if (ulist !~reg2str(deps[i])){
			ulist = ulist deps[i]" ";
		}
		i++;
	}
	return(ulist);
}

#
# show usage
#
function usage(){
	printf("tflat -- flatten a depends tree.  tflat is used to show all\n");
	printf("         packages which depend upon a given package or alternatively\n");
	printf("         all packages which are depend upon by a given package.\n");
	printf("\n");
	printf("Usage:\ttflat up|down depfile\n");
	printf("\n");
	printf("Options:\tdown\tgo down the depends tree (ie \"foo depends on:\")\n");
	printf("        \tup\tgo up the depends tree (ie \"foo is depended on by:\")\n");
	printf("\n");
	printf("Input file format is in the form\n");
	printf("foo	bar\n");
	printf("foo	baz\n");
	printf("libbar	bar\n");
	printf("\n");
	printf("meaning \"foo is depended upon by bar,\n");
	printf("         foo is depended upon by baz,\n");
	printf("         libbar is depended upon by bar\"\n");
	printf("\n");
	printf("The typical use is:\n");
	printf("cd /usr/pkgsrc\n");
	printf("./mk/bulk/printdepends > .depends\n");
	printf("./mk/bulk/tflat up .depends > .supports\n");
	printf("./mk/bulk/tflat down .depends > .requires\n");
	printf("\n");

}

